// SPDX-License-Identifier: MIT
pragma solidity >= 0.7.0 <0.8.0;

contract VotingSystem{
    //variables:
    struct vote{
        address voterAddress;
        bool choice;
    }
    struct voter{
        string voterName;
        bool voted;
    }
    uint private CountResult=0;
    uint public FinalResult=0;
    uint public TotalVoter= 0;
    uint public totalVote =0;

    address public BallotOfficialAdress;
    string public BallotOfficialName;
    string public Proposal;  //topic on which the voting is being done

    mapping (uint =>vote) private votes;
    mapping (address => voter) public voterRegister;
    
    enum State{Created, Voting, Ended}
    State public state; 

    //Modifiers:
    modifier condition(bool _condition){
        require(_condition);
        _;
    }
    modifier onlyOfficial(){
        require(msg.sender==BallotOfficialAdress);
        _;
    }
    modifier inState(State _state){
        require(state == _state);
        _;
    }

    //Functions:
    constructor(string memory _ballotOfficialName,
        string memory _proposal) {
        BallotOfficialAdress= msg.sender;
        BallotOfficialName= _ballotOfficialName;
        Proposal= _proposal;
        state = State.Created;

    }

    function addVoter(address _voterAddress,string memory _VoterName)public inState(State.Created) onlyOfficial {
        voter memory v;
        v.voterName = _VoterName;
        v.voted = false;
        voterRegister[_voterAddress]= v;
        TotalVoter++;
    }


    function StartVote() 
    public 
    inState(State.Created)
    onlyOfficial
    {
        state = State.Voting;   
    }


    function DoVote(bool _choice)
    public 
    inState(State.Voting)
    returns (bool voted)
    {
        bool isFound = false;
        if((bytes(voterRegister[msg.sender].voterName).length != 0) 
        && (voterRegister[msg.sender].voted == false)){
            voterRegister[msg.sender].voted= true;
            vote memory v;
            v.voterAddress = msg.sender;
            v.choice = _choice;
            if(_choice == true)
            {
                CountResult++;
            }
            votes[totalVote]=v;
            totalVote++;
            isFound = true;
        }
        return isFound;
    }
    

    function EndVote()public 
    inState(State.Voting)
    onlyOfficial 
    {
        state = State.Ended;
        FinalResult = CountResult;
    }
}
